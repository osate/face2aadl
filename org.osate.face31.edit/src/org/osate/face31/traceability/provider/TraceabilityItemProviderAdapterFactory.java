/**
 * FACE Data Model to AADL Translator
 * 
 * Copyright 2023 Carnegie Mellon University.
 * 
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON
 * AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
 * AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY
 * WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * Released under an Eclipse Public License - v1.0-style license, please see license.txt or contact
 * permission@sei.cmu.edu for full terms.
 * 
 * [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.
 * Please see Copyright notice for non-US Government use and distribution.
 * 
 * DM23-0412
 */
package org.osate.face31.traceability.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.osate.face31.traceability.util.TraceabilityAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceabilityItemProviderAdapterFactory extends TraceabilityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TraceabilityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.TraceabilityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceabilityModelItemProvider traceabilityModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.TraceabilityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceabilityModelAdapter() {
		if (traceabilityModelItemProvider == null) {
			traceabilityModelItemProvider = new TraceabilityModelItemProvider(this);
		}

		return traceabilityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.TraceabilityPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceabilityPointItemProvider traceabilityPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.TraceabilityPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceabilityPointAdapter() {
		if (traceabilityPointItemProvider == null) {
			traceabilityPointItemProvider = new TraceabilityPointItemProvider(this);
		}

		return traceabilityPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.UoPTraceabilitySet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UoPTraceabilitySetItemProvider uoPTraceabilitySetItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.UoPTraceabilitySet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUoPTraceabilitySetAdapter() {
		if (uoPTraceabilitySetItemProvider == null) {
			uoPTraceabilitySetItemProvider = new UoPTraceabilitySetItemProvider(this);
		}

		return uoPTraceabilitySetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.ConnectionTraceabilitySet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionTraceabilitySetItemProvider connectionTraceabilitySetItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.ConnectionTraceabilitySet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionTraceabilitySetAdapter() {
		if (connectionTraceabilitySetItemProvider == null) {
			connectionTraceabilitySetItemProvider = new ConnectionTraceabilitySetItemProvider(this);
		}

		return connectionTraceabilitySetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.ConceptualEntityTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptualEntityTraceItemProvider conceptualEntityTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.ConceptualEntityTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptualEntityTraceAdapter() {
		if (conceptualEntityTraceItemProvider == null) {
			conceptualEntityTraceItemProvider = new ConceptualEntityTraceItemProvider(this);
		}

		return conceptualEntityTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.ConceptualViewTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptualViewTraceItemProvider conceptualViewTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.ConceptualViewTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptualViewTraceAdapter() {
		if (conceptualViewTraceItemProvider == null) {
			conceptualViewTraceItemProvider = new ConceptualViewTraceItemProvider(this);
		}

		return conceptualViewTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.LogicalEntityTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalEntityTraceItemProvider logicalEntityTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.LogicalEntityTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalEntityTraceAdapter() {
		if (logicalEntityTraceItemProvider == null) {
			logicalEntityTraceItemProvider = new LogicalEntityTraceItemProvider(this);
		}

		return logicalEntityTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.LogicalViewTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalViewTraceItemProvider logicalViewTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.LogicalViewTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalViewTraceAdapter() {
		if (logicalViewTraceItemProvider == null) {
			logicalViewTraceItemProvider = new LogicalViewTraceItemProvider(this);
		}

		return logicalViewTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.PlatformEntityTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformEntityTraceItemProvider platformEntityTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.PlatformEntityTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformEntityTraceAdapter() {
		if (platformEntityTraceItemProvider == null) {
			platformEntityTraceItemProvider = new PlatformEntityTraceItemProvider(this);
		}

		return platformEntityTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.face31.traceability.PlatformViewTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformViewTraceItemProvider platformViewTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.face31.traceability.PlatformViewTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformViewTraceAdapter() {
		if (platformViewTraceItemProvider == null) {
			platformViewTraceItemProvider = new PlatformViewTraceItemProvider(this);
		}

		return platformViewTraceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (traceabilityModelItemProvider != null) traceabilityModelItemProvider.dispose();
		if (traceabilityPointItemProvider != null) traceabilityPointItemProvider.dispose();
		if (uoPTraceabilitySetItemProvider != null) uoPTraceabilitySetItemProvider.dispose();
		if (connectionTraceabilitySetItemProvider != null) connectionTraceabilitySetItemProvider.dispose();
		if (conceptualEntityTraceItemProvider != null) conceptualEntityTraceItemProvider.dispose();
		if (conceptualViewTraceItemProvider != null) conceptualViewTraceItemProvider.dispose();
		if (logicalEntityTraceItemProvider != null) logicalEntityTraceItemProvider.dispose();
		if (logicalViewTraceItemProvider != null) logicalViewTraceItemProvider.dispose();
		if (platformEntityTraceItemProvider != null) platformEntityTraceItemProvider.dispose();
		if (platformViewTraceItemProvider != null) platformViewTraceItemProvider.dispose();
	}

}
