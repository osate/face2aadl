/*******************************************************************************
 * FACE Data Model to AADL Translator
 * 
 * Copyright 2018 Carnegie Mellon University. All Rights Reserved.
 * 
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON
 * AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
 * AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY
 * WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * Released under an Eclipse Public License - v1.0-style license, please see license.txt or contact
 * permission@sei.cmu.edu for full terms.
 * 
 * [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.
 * Please see Copyright notice for non-US Government use and distribution.
 * 
 * DM18-0762
 *******************************************************************************/
package org.osate.simpleidl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleIDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.Specification");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0 = (RuleCall)cDefinitionsAssignment.eContents().get(0);
		
		///*
		// * This is a subset of IDL 4.2. It is intended to be used to parse IDL files generated from the FACE Conformance Test
		// * Suite 3.0. Portions of IDL which are not generated by the FACE CTS are not included in this subset.
		// * 
		// * In one case, FACE's version of IDL in the FACE standard disagrees with the IDL standard. In FACE, a union has an
		// * opening curly between the union's name and the "switch" keyword. It also has a corresponding closing curly and
		// * semicolon at the end of the union. These are not in the IDL standard. This subset follows the FACE standard for
		// * unions and deviates from the IDL standard.
		// * 
		// * The comments on each grammar rule in this file contain the relevant syntax definitions from the IDL standard's
		// * Annex A: Consolidated IDL Grammar.
		// */ /*
		// * (1) <specification> ::= <definition>+
		// */ Specification:
		//	definitions+=Definition+;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions+=Definition+
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0() { return cDefinitionsDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cModuleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cModuleKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDefinitionsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0_4_0 = (RuleCall)cDefinitionsAssignment_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStructAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStructKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cMembersAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_1_4_0 = (RuleCall)cMembersAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStructForwardAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cStructKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStructAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cStructStructCrossReference_2_2_0 = (CrossReference)cStructAssignment_2_2.eContents().get(0);
		private final RuleCall cStructStructIDTerminalRuleCall_2_2_0_1 = (RuleCall)cStructStructCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUnionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cUnionKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_3_2_0 = (RuleCall)cNameAssignment_3_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSwitchKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cUnsignedKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Keyword cShortKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_3_9 = (Keyword)cGroup_3.eContents().get(9);
		private final Assignment cCasesAssignment_3_10 = (Assignment)cGroup_3.eContents().get(10);
		private final RuleCall cCasesCaseParserRuleCall_3_10_0 = (RuleCall)cCasesAssignment_3_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_11 = (Keyword)cGroup_3.eContents().get(11);
		private final Keyword cSemicolonKeyword_3_12 = (Keyword)cGroup_3.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_3_13 = (Keyword)cGroup_3.eContents().get(13);
		private final Keyword cSemicolonKeyword_3_14 = (Keyword)cGroup_3.eContents().get(14);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEnumAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cEnumKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNameAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_4_2_0 = (RuleCall)cNameAssignment_4_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cLiteralsAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cLiteralsIDTerminalRuleCall_4_4_0 = (RuleCall)cLiteralsAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cCommaKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cLiteralsIDTerminalRuleCall_4_5_1_0 = (RuleCall)cLiteralsAssignment_4_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Keyword cSemicolonKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTypedefAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cTypedefKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_5_2_0 = (RuleCall)cTypeAssignment_5_2.eContents().get(0);
		private final Assignment cNameAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_5_3_0 = (RuleCall)cNameAssignment_5_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cArrayTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cTypedefKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cTypeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cTypeDefinitionCrossReference_6_2_0 = (CrossReference)cTypeAssignment_6_2.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_6_2_0_1 = (RuleCall)cTypeDefinitionCrossReference_6_2_0.eContents().get(1);
		private final Assignment cNameAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_6_3_0 = (RuleCall)cNameAssignment_6_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cSizeAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cSizeINTTerminalRuleCall_6_5_0 = (RuleCall)cSizeAssignment_6_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		
		///*
		// * (2) <definition> ::= <module_dcl> ";"
		// *                  | <const_dcl> ";"
		// *                  | <type_dcl> ";"
		// * (3) <module_dcl> ::= "module" <identifier> "{" <definition>+ "}"
		// * (20) <type_dcl> ::= <constr_type_dcl>
		// *                 | <native_dcl>
		// *                 | <typedef_dcl>
		// * (44) <constr_type_dcl> ::= <struct_dcl>
		// *                        | <union_dcl>
		// *                        | <enum_dcl>
		// * (45) <struct_dcl> ::= <struct_def>
		// *                   | <struct_forward_dcl>
		// * (46) <struct_def> ::= "struct" <identifier> "{" <member>+ "}"
		// * (48) <struct_forward_dcl> ::= "struct" <identifier>
		// * (49) <union_dcl> ::= <union_def>
		// *                  | <union_forward_dcl>
		// * (50) <union_def> ::= "union" <identifier> "switch" "(" <switch_type_spec> ")"
		// *                      "{" <switch_body> "}"
		// * (51) <switch_type_spec> ::= <integer_type>
		// *                         | <char_type>
		// *                         | <boolean_type>
		// *                         | <scoped_name>
		// * (52) <switch_body> ::= <case>+
		// * (57) <enum_dcl> ::= "enum" <identifier>
		// *                     "{" <enumerator> { "," <enumerator> } * "}"
		// * (58) <enumerator> ::= <identifier>
		// * (59) <array_declarator> ::= <identifier> <fixed_array_size>+
		// * (60) <fixed_array_size> ::= "[" <positive_int_const> "]"
		// * (62) <simple_declarator> ::= <identifier>
		// * (63) <typedef_dcl> ::= "typedef" <type_declarator>
		// * (64) <type_declarator> ::= { <simple_type_spec>
		// *                            | <template_type_spec>
		// *                            | <constr_type_dcl>
		// *                            } <any_declarators>
		// * (65) <any_declarators> ::= <any_declarator> { "," <any_declarator> }*
		// * (66) <any_declarator> ::= <simple_declarator>
		// *                       | <array_declarator>
		// */ Definition:
		//	{Module} 'module' name=ID '{' definitions+=Definition+ '}' ';' | {Struct} 'struct' name=ID '{' members+=Member+ '}'
		//	';' | {StructForward} 'struct' struct=[Struct] ';' | {Union} 'union' name=ID '{' 'switch' '(' 'unsigned' 'short' ')'
		//	'{' cases+=Case+ '}' ';' '}' ';' | {Enum} 'enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';' | {Typedef}
		//	'typedef' type=Type name=ID ';' | {ArrayType} 'typedef' type=[Definition|ScopedName] name=ID '[' size=INT ']' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Module} 'module' name=ID '{' definitions+=Definition+ '}' ';' | {Struct} 'struct' name=ID '{' members+=Member+ '}' ';'
		//| {StructForward} 'struct' struct=[Struct] ';' | {Union} 'union' name=ID '{' 'switch' '(' 'unsigned' 'short' ')' '{'
		//cases+=Case+ '}' ';' '}' ';' | {Enum} 'enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';' | {Typedef} 'typedef'
		//type=Type name=ID ';' | {ArrayType} 'typedef' type=[Definition|ScopedName] name=ID '[' size=INT ']' ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Module} 'module' name=ID '{' definitions+=Definition+ '}' ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Module}
		public Action getModuleAction_0_0() { return cModuleAction_0_0; }
		
		//'module'
		public Keyword getModuleKeyword_0_1() { return cModuleKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//definitions+=Definition+
		public Assignment getDefinitionsAssignment_0_4() { return cDefinitionsAssignment_0_4; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0_4_0() { return cDefinitionsDefinitionParserRuleCall_0_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }
		
		//';'
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }
		
		//{Struct} 'struct' name=ID '{' members+=Member+ '}' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Struct}
		public Action getStructAction_1_0() { return cStructAction_1_0; }
		
		//'struct'
		public Keyword getStructKeyword_1_1() { return cStructKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//members+=Member+
		public Assignment getMembersAssignment_1_4() { return cMembersAssignment_1_4; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_1_4_0() { return cMembersMemberParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//{StructForward} 'struct' struct=[Struct] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//{StructForward}
		public Action getStructForwardAction_2_0() { return cStructForwardAction_2_0; }
		
		//'struct'
		public Keyword getStructKeyword_2_1() { return cStructKeyword_2_1; }
		
		//struct=[Struct]
		public Assignment getStructAssignment_2_2() { return cStructAssignment_2_2; }
		
		//[Struct]
		public CrossReference getStructStructCrossReference_2_2_0() { return cStructStructCrossReference_2_2_0; }
		
		//ID
		public RuleCall getStructStructIDTerminalRuleCall_2_2_0_1() { return cStructStructIDTerminalRuleCall_2_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//{Union} 'union' name=ID '{' 'switch' '(' 'unsigned' 'short' ')' '{' cases+=Case+ '}' ';' '}' ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Union}
		public Action getUnionAction_3_0() { return cUnionAction_3_0; }
		
		//'union'
		public Keyword getUnionKeyword_3_1() { return cUnionKeyword_3_1; }
		
		//name=ID
		public Assignment getNameAssignment_3_2() { return cNameAssignment_3_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_2_0() { return cNameIDTerminalRuleCall_3_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_3() { return cLeftCurlyBracketKeyword_3_3; }
		
		//'switch'
		public Keyword getSwitchKeyword_3_4() { return cSwitchKeyword_3_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_5() { return cLeftParenthesisKeyword_3_5; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_3_6() { return cUnsignedKeyword_3_6; }
		
		//'short'
		public Keyword getShortKeyword_3_7() { return cShortKeyword_3_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_9() { return cLeftCurlyBracketKeyword_3_9; }
		
		//cases+=Case+
		public Assignment getCasesAssignment_3_10() { return cCasesAssignment_3_10; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_3_10_0() { return cCasesCaseParserRuleCall_3_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_11() { return cRightCurlyBracketKeyword_3_11; }
		
		//';'
		public Keyword getSemicolonKeyword_3_12() { return cSemicolonKeyword_3_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_13() { return cRightCurlyBracketKeyword_3_13; }
		
		//';'
		public Keyword getSemicolonKeyword_3_14() { return cSemicolonKeyword_3_14; }
		
		//{Enum} 'enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Enum}
		public Action getEnumAction_4_0() { return cEnumAction_4_0; }
		
		//'enum'
		public Keyword getEnumKeyword_4_1() { return cEnumKeyword_4_1; }
		
		//name=ID
		public Assignment getNameAssignment_4_2() { return cNameAssignment_4_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_2_0() { return cNameIDTerminalRuleCall_4_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_3() { return cLeftCurlyBracketKeyword_4_3; }
		
		//literals+=ID
		public Assignment getLiteralsAssignment_4_4() { return cLiteralsAssignment_4_4; }
		
		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_4_4_0() { return cLiteralsIDTerminalRuleCall_4_4_0; }
		
		//(',' literals+=ID)*
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//','
		public Keyword getCommaKeyword_4_5_0() { return cCommaKeyword_4_5_0; }
		
		//literals+=ID
		public Assignment getLiteralsAssignment_4_5_1() { return cLiteralsAssignment_4_5_1; }
		
		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_4_5_1_0() { return cLiteralsIDTerminalRuleCall_4_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_6() { return cRightCurlyBracketKeyword_4_6; }
		
		//';'
		public Keyword getSemicolonKeyword_4_7() { return cSemicolonKeyword_4_7; }
		
		//{Typedef} 'typedef' type=Type name=ID ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Typedef}
		public Action getTypedefAction_5_0() { return cTypedefAction_5_0; }
		
		//'typedef'
		public Keyword getTypedefKeyword_5_1() { return cTypedefKeyword_5_1; }
		
		//type=Type
		public Assignment getTypeAssignment_5_2() { return cTypeAssignment_5_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_5_2_0() { return cTypeTypeParserRuleCall_5_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_3() { return cNameAssignment_5_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_3_0() { return cNameIDTerminalRuleCall_5_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_4() { return cSemicolonKeyword_5_4; }
		
		//{ArrayType} 'typedef' type=[Definition|ScopedName] name=ID '[' size=INT ']' ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//{ArrayType}
		public Action getArrayTypeAction_6_0() { return cArrayTypeAction_6_0; }
		
		//'typedef'
		public Keyword getTypedefKeyword_6_1() { return cTypedefKeyword_6_1; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_6_2() { return cTypeAssignment_6_2; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_6_2_0() { return cTypeDefinitionCrossReference_6_2_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_6_2_0_1() { return cTypeDefinitionScopedNameParserRuleCall_6_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_6_3() { return cNameAssignment_6_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_3_0() { return cNameIDTerminalRuleCall_6_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_4() { return cLeftSquareBracketKeyword_6_4; }
		
		//size=INT
		public Assignment getSizeAssignment_6_5() { return cSizeAssignment_6_5; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_6_5_0() { return cSizeINTTerminalRuleCall_6_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_6() { return cRightSquareBracketKeyword_6_6; }
		
		//';'
		public Keyword getSemicolonKeyword_6_7() { return cSemicolonKeyword_6_7; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDefinitionCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_0_0_1 = (RuleCall)cTypeDefinitionCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///*
		// * (21) <type_spec> ::= <simple_type_spec>
		// * (22) <simple_type_spec> ::= <base_type_spec>
		// *                         | <scoped_name>
		// * (47) <member> ::= <type_spec> <declarators> ";"
		// * (62) <simple_declarator> ::= <identifier>
		// * (67) <declarators> ::= <declarator> { "," <declarator> }*
		// * (68) <declarator> ::= <simple_declarator>
		// */ Member:
		//	type=[Definition|ScopedName] name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Definition|ScopedName] name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_0_0() { return cTypeDefinitionCrossReference_0_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_0_0_1() { return cTypeDefinitionScopedNameParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelsINTTerminalRuleCall_0_1_0 = (RuleCall)cLabelsAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeDefinitionCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_1_0_1 = (RuleCall)cTypeDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * (21) <type_spec> ::= <simple_type_spec>
		// * (22) <simple_type_spec> ::= <base_type_spec>
		// *                         | <scoped_name>
		// * (53) <case> ::= <case_label>+ <element_spec> ";"
		// * (54) <case_label> ::= "case" <const_expr> ":"
		// *                   | "default" ":"
		// * (55) <element_spec> ::= <type_spec> <declarator>
		// * (62) <simple_declarator> ::= <identifier>
		// * (68) <declarator> ::= <simple_declarator>
		// */ Case:
		//	('case' labels+=INT ':')+ type=[Definition|ScopedName] name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('case' labels+=INT ':')+ type=[Definition|ScopedName] name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//('case' labels+=INT ':')+
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//labels+=INT
		public Assignment getLabelsAssignment_0_1() { return cLabelsAssignment_0_1; }
		
		//INT
		public RuleCall getLabelsINTTerminalRuleCall_0_1_0() { return cLabelsINTTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_1_0() { return cTypeDefinitionCrossReference_1_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_1_0_1() { return cTypeDefinitionScopedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSignedShortIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cShortKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSignedLongIntAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLongKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSignedLongLongIntAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLongKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLongKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUnsignedShortIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cUnsignedKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cShortKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUnsignedLongIntAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cUnsignedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLongKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cUnsignedLongLongIntAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cUnsignedKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLongKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cLongKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cFloatTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cFloatKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cDoubleTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cDoubleKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cLongDoubleTypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLongKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cDoubleKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cCharTypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cCharKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cWideCharTypeAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cWcharKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cBooleanTypeAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cBooleanKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cOctetTypeAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cOctetKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cReferencedTypeAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Assignment cTypeAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cTypeDefinitionCrossReference_13_1_0 = (CrossReference)cTypeAssignment_13_1.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_13_1_0_1 = (RuleCall)cTypeDefinitionCrossReference_13_1_0.eContents().get(1);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cBoundedSequenceAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cSequenceKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLessThanSignKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cTypeAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final CrossReference cTypeDefinitionCrossReference_14_3_0 = (CrossReference)cTypeAssignment_14_3.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_14_3_0_1 = (RuleCall)cTypeDefinitionCrossReference_14_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Assignment cSizeAssignment_14_5 = (Assignment)cGroup_14.eContents().get(5);
		private final RuleCall cSizeINTTerminalRuleCall_14_5_0 = (RuleCall)cSizeAssignment_14_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_14_6 = (Keyword)cGroup_14.eContents().get(6);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cUnboundedSequenceAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cSequenceKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLessThanSignKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cTypeAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final CrossReference cTypeDefinitionCrossReference_15_3_0 = (CrossReference)cTypeAssignment_15_3.eContents().get(0);
		private final RuleCall cTypeDefinitionScopedNameParserRuleCall_15_3_0_1 = (RuleCall)cTypeDefinitionCrossReference_15_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cBoundedStringAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cStringKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLessThanSignKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cSizeAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_16_3_0 = (RuleCall)cSizeAssignment_16_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cUnboundedStringAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cStringKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cBoundedWideStringAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cWstringKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cLessThanSignKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		private final Assignment cSizeAssignment_18_3 = (Assignment)cGroup_18.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_18_3_0 = (RuleCall)cSizeAssignment_18_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_18_4 = (Keyword)cGroup_18.eContents().get(4);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Action cUnboundedWideStringAction_19_0 = (Action)cGroup_19.eContents().get(0);
		private final Keyword cWstringKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cFixedPtTypeAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final Keyword cFixedKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Keyword cLessThanSignKeyword_20_2 = (Keyword)cGroup_20.eContents().get(2);
		private final Assignment cTotalDigitsAssignment_20_3 = (Assignment)cGroup_20.eContents().get(3);
		private final RuleCall cTotalDigitsINTTerminalRuleCall_20_3_0 = (RuleCall)cTotalDigitsAssignment_20_3.eContents().get(0);
		private final Keyword cCommaKeyword_20_4 = (Keyword)cGroup_20.eContents().get(4);
		private final Assignment cFractionalDigitsAssignment_20_5 = (Assignment)cGroup_20.eContents().get(5);
		private final RuleCall cFractionalDigitsINTTerminalRuleCall_20_5_0 = (RuleCall)cFractionalDigitsAssignment_20_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_20_6 = (Keyword)cGroup_20.eContents().get(6);
		
		///*
		// * (21) <type_spec> ::= <simple_type_spec>
		// * (22) <simple_type_spec> ::= <base_type_spec>
		// *                         | <scoped_name>
		// * (23) <base_type_spec> ::= <integer_type>
		// *                       | <floating_pt_type>
		// *                       | <char_type>
		// *                       | <wide_char_type>
		// *                       | <boolean_type>
		// *                       | <octet_type>
		// * (24) <floating_pt_type> ::= "float"
		// *                         | "double"
		// *                         | "long" "double"
		// * (25) <integer_type> ::= <signed_int>
		// *                     | <unsigned_int>
		// * (26) <signed_int> ::= <signed_short_int>
		// *                   | <signed_long_int>
		// *                   | <signed_longlong_int>
		// * (27) <signed_short_int> ::= "short"
		// * (28) <signed_long_int> ::= "long"
		// * (29) <signed_longlong_int> ::= "long" "long"
		// * (30) <unsigned_int> ::= <unsigned_short_int>
		// *                     | <unsigned_long_int>
		// *                     | <unsigned_longlong_int>
		// * (31) <unsigned_short_int> ::= "unsigned" "short"
		// * (32) <unsigned_long_int> ::= "unsigned" "long"
		// * (33) <unsigned_longlong_int> ::= "unsigned" "long" "long"
		// * (34) <char_type> ::= "char"
		// * (35) <wide_char_type> ::= "wchar"
		// * (36) <boolean_type> ::= "boolean"
		// * (37) <octet_type> ::= "octet"
		// * (38) <template_type_spec> ::= <sequence_type>
		// *                           | <string_type>
		// *                           | <wide_string_type>
		// *                           | <fixed_pt_type>
		// * (39) <sequence_type> ::= "sequence" "<" <type_spec> "," <positive_int_const> ">"
		// *                      | "sequence" "<" <type_spec> ">"
		// * (40) <string_type> ::= "string" "<" <positive_int_const> ">"
		// *                    | "string"
		// * (41) <wide_string_type> ::= "wstring" "<" <positive_int_const> ">"
		// *                         | "wstring"
		// * (42) <fixed_pt_type> ::= "fixed" "<" <positive_int_const> "," <positive_int_const> ">"
		// * (64) <type_declarator> ::= { <simple_type_spec>
		// *                            | <template_type_spec>
		// *                            | <constr_type_dcl>
		// *                            } <any_declarators>
		// */ Type:
		//	{SignedShortInt} 'short' | {SignedLongInt} 'long' | {SignedLongLongInt} 'long' 'long' | {UnsignedShortInt} 'unsigned'
		//	'short' | {UnsignedLongInt} 'unsigned' 'long' | {UnsignedLongLongInt} 'unsigned' 'long' 'long' | {FloatType} 'float' |
		//	{DoubleType} 'double' | {LongDoubleType} 'long' 'double' | {CharType} 'char' | {WideCharType} 'wchar' | {BooleanType}
		//	'boolean' | {OctetType} 'octet' | {ReferencedType} type=[Definition|ScopedName] | {BoundedSequence} 'sequence' '<'
		//	type=[Definition|ScopedName] ',' size=INT '>' | {UnboundedSequence} 'sequence' '<' type=[Definition|ScopedName] '>' |
		//	{BoundedString} 'string' '<' size=INT '>' | {UnboundedString} 'string' | {BoundedWideString} 'wstring' '<' size=INT
		//	'>' | {UnboundedWideString} 'wstring' | {FixedPtType} 'fixed' '<' totalDigits=INT ',' fractionalDigits=INT '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{SignedShortInt} 'short' | {SignedLongInt} 'long' | {SignedLongLongInt} 'long' 'long' | {UnsignedShortInt} 'unsigned'
		//'short' | {UnsignedLongInt} 'unsigned' 'long' | {UnsignedLongLongInt} 'unsigned' 'long' 'long' | {FloatType} 'float' |
		//{DoubleType} 'double' | {LongDoubleType} 'long' 'double' | {CharType} 'char' | {WideCharType} 'wchar' | {BooleanType}
		//'boolean' | {OctetType} 'octet' | {ReferencedType} type=[Definition|ScopedName] | {BoundedSequence} 'sequence' '<'
		//type=[Definition|ScopedName] ',' size=INT '>' | {UnboundedSequence} 'sequence' '<' type=[Definition|ScopedName] '>' |
		//{BoundedString} 'string' '<' size=INT '>' | {UnboundedString} 'string' | {BoundedWideString} 'wstring' '<' size=INT '>'
		//| {UnboundedWideString} 'wstring' | {FixedPtType} 'fixed' '<' totalDigits=INT ',' fractionalDigits=INT '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SignedShortInt} 'short'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SignedShortInt}
		public Action getSignedShortIntAction_0_0() { return cSignedShortIntAction_0_0; }
		
		//'short'
		public Keyword getShortKeyword_0_1() { return cShortKeyword_0_1; }
		
		//{SignedLongInt} 'long'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SignedLongInt}
		public Action getSignedLongIntAction_1_0() { return cSignedLongIntAction_1_0; }
		
		//'long'
		public Keyword getLongKeyword_1_1() { return cLongKeyword_1_1; }
		
		//{SignedLongLongInt} 'long' 'long'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SignedLongLongInt}
		public Action getSignedLongLongIntAction_2_0() { return cSignedLongLongIntAction_2_0; }
		
		//'long'
		public Keyword getLongKeyword_2_1() { return cLongKeyword_2_1; }
		
		//'long'
		public Keyword getLongKeyword_2_2() { return cLongKeyword_2_2; }
		
		//{UnsignedShortInt} 'unsigned' 'short'
		public Group getGroup_3() { return cGroup_3; }
		
		//{UnsignedShortInt}
		public Action getUnsignedShortIntAction_3_0() { return cUnsignedShortIntAction_3_0; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_3_1() { return cUnsignedKeyword_3_1; }
		
		//'short'
		public Keyword getShortKeyword_3_2() { return cShortKeyword_3_2; }
		
		//{UnsignedLongInt} 'unsigned' 'long'
		public Group getGroup_4() { return cGroup_4; }
		
		//{UnsignedLongInt}
		public Action getUnsignedLongIntAction_4_0() { return cUnsignedLongIntAction_4_0; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_4_1() { return cUnsignedKeyword_4_1; }
		
		//'long'
		public Keyword getLongKeyword_4_2() { return cLongKeyword_4_2; }
		
		//{UnsignedLongLongInt} 'unsigned' 'long' 'long'
		public Group getGroup_5() { return cGroup_5; }
		
		//{UnsignedLongLongInt}
		public Action getUnsignedLongLongIntAction_5_0() { return cUnsignedLongLongIntAction_5_0; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_5_1() { return cUnsignedKeyword_5_1; }
		
		//'long'
		public Keyword getLongKeyword_5_2() { return cLongKeyword_5_2; }
		
		//'long'
		public Keyword getLongKeyword_5_3() { return cLongKeyword_5_3; }
		
		//{FloatType} 'float'
		public Group getGroup_6() { return cGroup_6; }
		
		//{FloatType}
		public Action getFloatTypeAction_6_0() { return cFloatTypeAction_6_0; }
		
		//'float'
		public Keyword getFloatKeyword_6_1() { return cFloatKeyword_6_1; }
		
		//{DoubleType} 'double'
		public Group getGroup_7() { return cGroup_7; }
		
		//{DoubleType}
		public Action getDoubleTypeAction_7_0() { return cDoubleTypeAction_7_0; }
		
		//'double'
		public Keyword getDoubleKeyword_7_1() { return cDoubleKeyword_7_1; }
		
		//{LongDoubleType} 'long' 'double'
		public Group getGroup_8() { return cGroup_8; }
		
		//{LongDoubleType}
		public Action getLongDoubleTypeAction_8_0() { return cLongDoubleTypeAction_8_0; }
		
		//'long'
		public Keyword getLongKeyword_8_1() { return cLongKeyword_8_1; }
		
		//'double'
		public Keyword getDoubleKeyword_8_2() { return cDoubleKeyword_8_2; }
		
		//{CharType} 'char'
		public Group getGroup_9() { return cGroup_9; }
		
		//{CharType}
		public Action getCharTypeAction_9_0() { return cCharTypeAction_9_0; }
		
		//'char'
		public Keyword getCharKeyword_9_1() { return cCharKeyword_9_1; }
		
		//{WideCharType} 'wchar'
		public Group getGroup_10() { return cGroup_10; }
		
		//{WideCharType}
		public Action getWideCharTypeAction_10_0() { return cWideCharTypeAction_10_0; }
		
		//'wchar'
		public Keyword getWcharKeyword_10_1() { return cWcharKeyword_10_1; }
		
		//{BooleanType} 'boolean'
		public Group getGroup_11() { return cGroup_11; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_11_0() { return cBooleanTypeAction_11_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_11_1() { return cBooleanKeyword_11_1; }
		
		//{OctetType} 'octet'
		public Group getGroup_12() { return cGroup_12; }
		
		//{OctetType}
		public Action getOctetTypeAction_12_0() { return cOctetTypeAction_12_0; }
		
		//'octet'
		public Keyword getOctetKeyword_12_1() { return cOctetKeyword_12_1; }
		
		//{ReferencedType} type=[Definition|ScopedName]
		public Group getGroup_13() { return cGroup_13; }
		
		//{ReferencedType}
		public Action getReferencedTypeAction_13_0() { return cReferencedTypeAction_13_0; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_13_1() { return cTypeAssignment_13_1; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_13_1_0() { return cTypeDefinitionCrossReference_13_1_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_13_1_0_1() { return cTypeDefinitionScopedNameParserRuleCall_13_1_0_1; }
		
		//{BoundedSequence} 'sequence' '<' type=[Definition|ScopedName] ',' size=INT '>'
		public Group getGroup_14() { return cGroup_14; }
		
		//{BoundedSequence}
		public Action getBoundedSequenceAction_14_0() { return cBoundedSequenceAction_14_0; }
		
		//'sequence'
		public Keyword getSequenceKeyword_14_1() { return cSequenceKeyword_14_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_14_2() { return cLessThanSignKeyword_14_2; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_14_3() { return cTypeAssignment_14_3; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_14_3_0() { return cTypeDefinitionCrossReference_14_3_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_14_3_0_1() { return cTypeDefinitionScopedNameParserRuleCall_14_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_14_4() { return cCommaKeyword_14_4; }
		
		//size=INT
		public Assignment getSizeAssignment_14_5() { return cSizeAssignment_14_5; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_14_5_0() { return cSizeINTTerminalRuleCall_14_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_14_6() { return cGreaterThanSignKeyword_14_6; }
		
		//{UnboundedSequence} 'sequence' '<' type=[Definition|ScopedName] '>'
		public Group getGroup_15() { return cGroup_15; }
		
		//{UnboundedSequence}
		public Action getUnboundedSequenceAction_15_0() { return cUnboundedSequenceAction_15_0; }
		
		//'sequence'
		public Keyword getSequenceKeyword_15_1() { return cSequenceKeyword_15_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_15_2() { return cLessThanSignKeyword_15_2; }
		
		//type=[Definition|ScopedName]
		public Assignment getTypeAssignment_15_3() { return cTypeAssignment_15_3; }
		
		//[Definition|ScopedName]
		public CrossReference getTypeDefinitionCrossReference_15_3_0() { return cTypeDefinitionCrossReference_15_3_0; }
		
		//ScopedName
		public RuleCall getTypeDefinitionScopedNameParserRuleCall_15_3_0_1() { return cTypeDefinitionScopedNameParserRuleCall_15_3_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_15_4() { return cGreaterThanSignKeyword_15_4; }
		
		//{BoundedString} 'string' '<' size=INT '>'
		public Group getGroup_16() { return cGroup_16; }
		
		//{BoundedString}
		public Action getBoundedStringAction_16_0() { return cBoundedStringAction_16_0; }
		
		//'string'
		public Keyword getStringKeyword_16_1() { return cStringKeyword_16_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_16_2() { return cLessThanSignKeyword_16_2; }
		
		//size=INT
		public Assignment getSizeAssignment_16_3() { return cSizeAssignment_16_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_16_3_0() { return cSizeINTTerminalRuleCall_16_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_16_4() { return cGreaterThanSignKeyword_16_4; }
		
		//{UnboundedString} 'string'
		public Group getGroup_17() { return cGroup_17; }
		
		//{UnboundedString}
		public Action getUnboundedStringAction_17_0() { return cUnboundedStringAction_17_0; }
		
		//'string'
		public Keyword getStringKeyword_17_1() { return cStringKeyword_17_1; }
		
		//{BoundedWideString} 'wstring' '<' size=INT '>'
		public Group getGroup_18() { return cGroup_18; }
		
		//{BoundedWideString}
		public Action getBoundedWideStringAction_18_0() { return cBoundedWideStringAction_18_0; }
		
		//'wstring'
		public Keyword getWstringKeyword_18_1() { return cWstringKeyword_18_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_18_2() { return cLessThanSignKeyword_18_2; }
		
		//size=INT
		public Assignment getSizeAssignment_18_3() { return cSizeAssignment_18_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_18_3_0() { return cSizeINTTerminalRuleCall_18_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_18_4() { return cGreaterThanSignKeyword_18_4; }
		
		//{UnboundedWideString} 'wstring'
		public Group getGroup_19() { return cGroup_19; }
		
		//{UnboundedWideString}
		public Action getUnboundedWideStringAction_19_0() { return cUnboundedWideStringAction_19_0; }
		
		//'wstring'
		public Keyword getWstringKeyword_19_1() { return cWstringKeyword_19_1; }
		
		//{FixedPtType} 'fixed' '<' totalDigits=INT ',' fractionalDigits=INT '>'
		public Group getGroup_20() { return cGroup_20; }
		
		//{FixedPtType}
		public Action getFixedPtTypeAction_20_0() { return cFixedPtTypeAction_20_0; }
		
		//'fixed'
		public Keyword getFixedKeyword_20_1() { return cFixedKeyword_20_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_20_2() { return cLessThanSignKeyword_20_2; }
		
		//totalDigits=INT
		public Assignment getTotalDigitsAssignment_20_3() { return cTotalDigitsAssignment_20_3; }
		
		//INT
		public RuleCall getTotalDigitsINTTerminalRuleCall_20_3_0() { return cTotalDigitsINTTerminalRuleCall_20_3_0; }
		
		//','
		public Keyword getCommaKeyword_20_4() { return cCommaKeyword_20_4; }
		
		//fractionalDigits=INT
		public Assignment getFractionalDigitsAssignment_20_5() { return cFractionalDigitsAssignment_20_5; }
		
		//INT
		public RuleCall getFractionalDigitsINTTerminalRuleCall_20_5_0() { return cFractionalDigitsINTTerminalRuleCall_20_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_20_6() { return cGreaterThanSignKeyword_20_6; }
	}
	public class ScopedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.ScopedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///*
		// * (4) <scoped_name> ::= <identifier>
		// *                   | "::" <identifier>
		// *                   | <scoped_name> "::" <identifier>
		// */ ScopedName:
		//	'::'? (ID '::')* ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'::'? (ID '::')* ID
		public Group getGroup() { return cGroup; }
		
		//'::'?
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }
		
		//(ID '::')*
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1_1() { return cColonColonKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private final SpecificationElements pSpecification;
	private final DefinitionElements pDefinition;
	private final MemberElements pMember;
	private final CaseElements pCase;
	private final TypeElements pType;
	private final ScopedNameElements pScopedName;
	private final TerminalRule tID;
	private final TerminalRule tPREPROCESSOR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleIDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpecification = new SpecificationElements();
		this.pDefinition = new DefinitionElements();
		this.pMember = new MemberElements();
		this.pCase = new CaseElements();
		this.pType = new TypeElements();
		this.pScopedName = new ScopedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.ID");
		this.tPREPROCESSOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.simpleidl.SimpleIDL.PREPROCESSOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.simpleidl.SimpleIDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * This is a subset of IDL 4.2. It is intended to be used to parse IDL files generated from the FACE Conformance Test
	// * Suite 3.0. Portions of IDL which are not generated by the FACE CTS are not included in this subset.
	// * 
	// * In one case, FACE's version of IDL in the FACE standard disagrees with the IDL standard. In FACE, a union has an
	// * opening curly between the union's name and the "switch" keyword. It also has a corresponding closing curly and
	// * semicolon at the end of the union. These are not in the IDL standard. This subset follows the FACE standard for
	// * unions and deviates from the IDL standard.
	// * 
	// * The comments on each grammar rule in this file contain the relevant syntax definitions from the IDL standard's
	// * Annex A: Consolidated IDL Grammar.
	// */ /*
	// * (1) <specification> ::= <definition>+
	// */ Specification:
	//	definitions+=Definition+;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	///*
	// * (2) <definition> ::= <module_dcl> ";"
	// *                  | <const_dcl> ";"
	// *                  | <type_dcl> ";"
	// * (3) <module_dcl> ::= "module" <identifier> "{" <definition>+ "}"
	// * (20) <type_dcl> ::= <constr_type_dcl>
	// *                 | <native_dcl>
	// *                 | <typedef_dcl>
	// * (44) <constr_type_dcl> ::= <struct_dcl>
	// *                        | <union_dcl>
	// *                        | <enum_dcl>
	// * (45) <struct_dcl> ::= <struct_def>
	// *                   | <struct_forward_dcl>
	// * (46) <struct_def> ::= "struct" <identifier> "{" <member>+ "}"
	// * (48) <struct_forward_dcl> ::= "struct" <identifier>
	// * (49) <union_dcl> ::= <union_def>
	// *                  | <union_forward_dcl>
	// * (50) <union_def> ::= "union" <identifier> "switch" "(" <switch_type_spec> ")"
	// *                      "{" <switch_body> "}"
	// * (51) <switch_type_spec> ::= <integer_type>
	// *                         | <char_type>
	// *                         | <boolean_type>
	// *                         | <scoped_name>
	// * (52) <switch_body> ::= <case>+
	// * (57) <enum_dcl> ::= "enum" <identifier>
	// *                     "{" <enumerator> { "," <enumerator> } * "}"
	// * (58) <enumerator> ::= <identifier>
	// * (59) <array_declarator> ::= <identifier> <fixed_array_size>+
	// * (60) <fixed_array_size> ::= "[" <positive_int_const> "]"
	// * (62) <simple_declarator> ::= <identifier>
	// * (63) <typedef_dcl> ::= "typedef" <type_declarator>
	// * (64) <type_declarator> ::= { <simple_type_spec>
	// *                            | <template_type_spec>
	// *                            | <constr_type_dcl>
	// *                            } <any_declarators>
	// * (65) <any_declarators> ::= <any_declarator> { "," <any_declarator> }*
	// * (66) <any_declarator> ::= <simple_declarator>
	// *                       | <array_declarator>
	// */ Definition:
	//	{Module} 'module' name=ID '{' definitions+=Definition+ '}' ';' | {Struct} 'struct' name=ID '{' members+=Member+ '}'
	//	';' | {StructForward} 'struct' struct=[Struct] ';' | {Union} 'union' name=ID '{' 'switch' '(' 'unsigned' 'short' ')'
	//	'{' cases+=Case+ '}' ';' '}' ';' | {Enum} 'enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';' | {Typedef}
	//	'typedef' type=Type name=ID ';' | {ArrayType} 'typedef' type=[Definition|ScopedName] name=ID '[' size=INT ']' ';';
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	///*
	// * (21) <type_spec> ::= <simple_type_spec>
	// * (22) <simple_type_spec> ::= <base_type_spec>
	// *                         | <scoped_name>
	// * (47) <member> ::= <type_spec> <declarators> ";"
	// * (62) <simple_declarator> ::= <identifier>
	// * (67) <declarators> ::= <declarator> { "," <declarator> }*
	// * (68) <declarator> ::= <simple_declarator>
	// */ Member:
	//	type=[Definition|ScopedName] name=ID ';';
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	///*
	// * (21) <type_spec> ::= <simple_type_spec>
	// * (22) <simple_type_spec> ::= <base_type_spec>
	// *                         | <scoped_name>
	// * (53) <case> ::= <case_label>+ <element_spec> ";"
	// * (54) <case_label> ::= "case" <const_expr> ":"
	// *                   | "default" ":"
	// * (55) <element_spec> ::= <type_spec> <declarator>
	// * (62) <simple_declarator> ::= <identifier>
	// * (68) <declarator> ::= <simple_declarator>
	// */ Case:
	//	('case' labels+=INT ':')+ type=[Definition|ScopedName] name=ID ';';
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	///*
	// * (21) <type_spec> ::= <simple_type_spec>
	// * (22) <simple_type_spec> ::= <base_type_spec>
	// *                         | <scoped_name>
	// * (23) <base_type_spec> ::= <integer_type>
	// *                       | <floating_pt_type>
	// *                       | <char_type>
	// *                       | <wide_char_type>
	// *                       | <boolean_type>
	// *                       | <octet_type>
	// * (24) <floating_pt_type> ::= "float"
	// *                         | "double"
	// *                         | "long" "double"
	// * (25) <integer_type> ::= <signed_int>
	// *                     | <unsigned_int>
	// * (26) <signed_int> ::= <signed_short_int>
	// *                   | <signed_long_int>
	// *                   | <signed_longlong_int>
	// * (27) <signed_short_int> ::= "short"
	// * (28) <signed_long_int> ::= "long"
	// * (29) <signed_longlong_int> ::= "long" "long"
	// * (30) <unsigned_int> ::= <unsigned_short_int>
	// *                     | <unsigned_long_int>
	// *                     | <unsigned_longlong_int>
	// * (31) <unsigned_short_int> ::= "unsigned" "short"
	// * (32) <unsigned_long_int> ::= "unsigned" "long"
	// * (33) <unsigned_longlong_int> ::= "unsigned" "long" "long"
	// * (34) <char_type> ::= "char"
	// * (35) <wide_char_type> ::= "wchar"
	// * (36) <boolean_type> ::= "boolean"
	// * (37) <octet_type> ::= "octet"
	// * (38) <template_type_spec> ::= <sequence_type>
	// *                           | <string_type>
	// *                           | <wide_string_type>
	// *                           | <fixed_pt_type>
	// * (39) <sequence_type> ::= "sequence" "<" <type_spec> "," <positive_int_const> ">"
	// *                      | "sequence" "<" <type_spec> ">"
	// * (40) <string_type> ::= "string" "<" <positive_int_const> ">"
	// *                    | "string"
	// * (41) <wide_string_type> ::= "wstring" "<" <positive_int_const> ">"
	// *                         | "wstring"
	// * (42) <fixed_pt_type> ::= "fixed" "<" <positive_int_const> "," <positive_int_const> ">"
	// * (64) <type_declarator> ::= { <simple_type_spec>
	// *                            | <template_type_spec>
	// *                            | <constr_type_dcl>
	// *                            } <any_declarators>
	// */ Type:
	//	{SignedShortInt} 'short' | {SignedLongInt} 'long' | {SignedLongLongInt} 'long' 'long' | {UnsignedShortInt} 'unsigned'
	//	'short' | {UnsignedLongInt} 'unsigned' 'long' | {UnsignedLongLongInt} 'unsigned' 'long' 'long' | {FloatType} 'float' |
	//	{DoubleType} 'double' | {LongDoubleType} 'long' 'double' | {CharType} 'char' | {WideCharType} 'wchar' | {BooleanType}
	//	'boolean' | {OctetType} 'octet' | {ReferencedType} type=[Definition|ScopedName] | {BoundedSequence} 'sequence' '<'
	//	type=[Definition|ScopedName] ',' size=INT '>' | {UnboundedSequence} 'sequence' '<' type=[Definition|ScopedName] '>' |
	//	{BoundedString} 'string' '<' size=INT '>' | {UnboundedString} 'string' | {BoundedWideString} 'wstring' '<' size=INT
	//	'>' | {UnboundedWideString} 'wstring' | {FixedPtType} 'fixed' '<' totalDigits=INT ',' fractionalDigits=INT '>';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	///*
	// * (4) <scoped_name> ::= <identifier>
	// *                   | "::" <identifier>
	// *                   | <scoped_name> "::" <identifier>
	// */ ScopedName:
	//	'::'? (ID '::')* ID;
	public ScopedNameElements getScopedNameAccess() {
		return pScopedName;
	}
	
	public ParserRule getScopedNameRule() {
		return getScopedNameAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal PREPROCESSOR:
	//	('#define' | '#endif' | '#ifndef' | '#include') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getPREPROCESSORRule() {
		return tPREPROCESSOR;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
